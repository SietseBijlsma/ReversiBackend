@using Microsoft.AspNetCore.Http
@using System.Security.Claims
@using ReversiRestApi.Enums

@model ReversiRestApi.Models.ApiGame

<link href="@Url.Content("~/css/style.min.css")" rel="stylesheet" type="text/css" />

@{
    ViewData["Title"] = "Board";
}

<head>
    @if (Model.Status.Equals("Waiting"))
    {
        <a asp-action="Start" asp-route-token="@Model.Token" class="btn btn-primary">Start Game</a>
    }
    else if (Model.Status.Equals("Running"))
    {
        <a asp-action="SurrenderGame" asp-route-token="@Model.Token" class="btn btn-primary">Surrender</a>
    }
    else if (Model.Status.Equals("Finished"))
    {
        <p>Game has ended</p>
        <a asp-action="Waiting" class="btn btn-primary">Leave the game</a>
    }
    <p>@Model.Status</p>
</head>

<div id="board"></div>

@section scripts {
    <script src="@Url.Content("~/js/vendor.js")"></script>
    <script src="@Url.Content("~/js/templates.js")"></script>
    <script src="@Url.Content("~/js/app.js")" type="text/javascript"></script>
    <script src="~/js/signalr/signalr.js"></script>

    <script type="text/javascript">
        Game.init("production", "@Model.Token", "@this.User.FindFirst(ClaimTypes.NameIdentifier).Value");
    </script>

    <script type="text/javascript">

        var connection = new signalR.HubConnectionBuilder().withUrl("/gameHub").build();

        async function start() {
            try {
                await connection.start();
                await connection.invoke("JoinGroup", "@Model.Token");
            } catch (err) {
                setTimeout(start, 5000);
            }
        }
        connection.onclose(start);
        start();

        connection.on("ReceiveMessage",
            function(gameToken, message) {
                Game.update();
            });

        $('#board').on('updateBoard', async function() {
            await connection.invoke("SendMessageToGroup", "@Model.Token", "test");
        });

    </script>
}
